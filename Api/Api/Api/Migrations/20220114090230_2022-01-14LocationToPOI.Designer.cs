// <auto-generated />
using System;
using Api;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Api.Migrations
{
    [DbContext(typeof(NIKEContext))]
    [Migration("20220114090230_2022-01-14LocationToPOI")]
    partial class _20220114LocationToPOI
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.13");

            modelBuilder.Entity("Api.Model.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<long?>("CountryId")
                        .IsRequired()
                        .HasColumnType("INTEGER")
                        .HasColumnName("CountryID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Api.Model.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<string>("Comment1")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Comment");

                    b.Property<long?>("EntryId")
                        .IsRequired()
                        .HasColumnType("INTEGER")
                        .HasColumnName("EntryID");

                    b.Property<long?>("UserId")
                        .IsRequired()
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Api.Model.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Api.Model.Entry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("Likes")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<long>("LocationId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("LocationID");

                    b.Property<long?>("Rating")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.ToTable("Entry");
                });

            modelBuilder.Entity("Api.Model.POI", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<long>("CityID")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Latitude")
                        .HasColumnType("INTEGER")
                        .HasColumnName("yCordinate");

                    b.Property<long>("Longitude")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xCordinate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CityID");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Api.Model.Reaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<long?>("EntryId")
                        .IsRequired()
                        .HasColumnType("INTEGER")
                        .HasColumnName("EntryID");

                    b.Property<long?>("LikeDislike")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UserId")
                        .IsRequired()
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.ToTable("Reaction");
                });

            modelBuilder.Entity("Api.Model.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<string>("CreationDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExpiryDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("JwtID");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("Used")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UserId")
                        .IsRequired()
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Api.Model.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT(250)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("TEXT(45)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("TEXT(100)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Api.Model.POI", b =>
                {
                    b.HasOne("Api.Model.City", "City")
                        .WithMany("Poi")
                        .HasForeignKey("CityID")
                        .HasConstraintName("FK_City")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Api.Model.City", b =>
                {
                    b.Navigation("Poi");
                });
#pragma warning restore 612, 618
        }
    }
}
